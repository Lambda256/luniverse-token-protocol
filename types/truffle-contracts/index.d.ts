/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface ContractProxyContract
  extends Truffle.Contract<ContractProxyInstance> {
  "new"(
    _contractAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<ContractProxyInstance>;
}

export interface EIP20StandardContract
  extends Truffle.Contract<EIP20StandardInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<EIP20StandardInstance>;
}

export interface ERC20TokenContract
  extends Truffle.Contract<ERC20TokenInstance> {
  "new"(
    _name: string,
    _symbol: string,
    _decimals: number | BigNumber | string,
    _initialSupply: number | BigNumber | string,
    _maxSupply: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC20TokenInstance>;
}

export interface GasDelegationBlacklistContract
  extends Truffle.Contract<GasDelegationBlacklistInstance> {
  "new"(
    fundOwnerAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<GasDelegationBlacklistInstance>;
}

export interface GasDelegationWhitelistContract
  extends Truffle.Contract<GasDelegationWhitelistInstance> {
  "new"(
    superWhitelistEntries: (string | BigNumber)[],
    whitelistEntries: (string | BigNumber)[],
    fundOwnerAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<GasDelegationWhitelistInstance>;
}

export interface LinearMintableTokenContract
  extends Truffle.Contract<LinearMintableTokenInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<LinearMintableTokenInstance>;
}

export interface MainBridgeContract
  extends Truffle.Contract<MainBridgeInstance> {
  "new"(
    _chainId: number | BigNumber | string,
    _token: string | BigNumber,
    _mainAdmin: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<MainBridgeInstance>;
}

export interface MainTokenContract extends Truffle.Contract<MainTokenInstance> {
  "new"(
    _name: string,
    _symbol: string,
    _decimals: number | BigNumber | string,
    _initialSupply: number | BigNumber | string,
    _maxSupply: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<MainTokenInstance>;
}

export interface MainTokenProxyContract
  extends Truffle.Contract<MainTokenProxyInstance> {
  "new"(
    _contractAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<MainTokenProxyInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface SideBridgeContract
  extends Truffle.Contract<SideBridgeInstance> {
  "new"(
    _mainChainId: number | BigNumber | string,
    _mainBridge: string | BigNumber,
    _sideChainId: number | BigNumber | string,
    _requiredSignatures: number | BigNumber | string,
    _authorities: (string | BigNumber)[],
    meta?: Truffle.TransactionDetails
  ): Promise<SideBridgeInstance>;
}

export interface SideTokenContract extends Truffle.Contract<SideTokenInstance> {
  "new"(
    _name: string,
    _symbol: string,
    _decimals: number | BigNumber | string,
    _sideBridge: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<SideTokenInstance>;
}

export interface TestingERC20TokenContract
  extends Truffle.Contract<TestingERC20TokenInstance> {
  "new"(
    _name: string,
    _symbol: string,
    _decimals: number | BigNumber | string,
    _initialSupply: number | BigNumber | string,
    _maxSupply: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TestingERC20TokenInstance>;
}

export interface TestingLinearMintableMainTokenContract
  extends Truffle.Contract<TestingLinearMintableMainTokenInstance> {
  "new"(
    _name: string,
    _symbol: string,
    _decimals: number | BigNumber | string,
    _initialSupply: number | BigNumber | string,
    _maxSupply: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TestingLinearMintableMainTokenInstance>;
}

export interface TestTokenRecipientContract
  extends Truffle.Contract<TestTokenRecipientInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestTokenRecipientInstance>;
}

export interface TokenRecipientContract
  extends Truffle.Contract<TokenRecipientInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TokenRecipientInstance>;
}

export interface TokenVestingContract
  extends Truffle.Contract<TokenVestingInstance> {
  "new"(
    _sideToken: string | BigNumber,
    _recipient: string | BigNumber,
    _vestedAmount: number | BigNumber | string,
    _start: number | BigNumber | string,
    _cliffInDays: number | BigNumber | string,
    _durationInDays: number | BigNumber | string,
    _intervalInDays: number | BigNumber | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TokenVestingInstance>;
}

export interface WhitelistAdminRoleContract
  extends Truffle.Contract<WhitelistAdminRoleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WhitelistAdminRoleInstance>;
}

export interface ContractProxyInstance extends Truffle.ContractInstance {
  transferOwnership(
    newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  UpdateContractAddress(
    _newAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  oldAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
  contractAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface EIP20StandardInstance extends Truffle.ContractInstance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approve(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface ERC20TokenInstance extends Truffle.ContractInstance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approve(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  increaseAllowance(
    _spender: string | BigNumber,
    _addedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  decreaseAllowance(
    _spender: string | BigNumber,
    _subtractedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approveAndCall(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  maxSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface GasDelegationBlacklistInstance
  extends Truffle.ContractInstance {
  isWhitelistAdmin(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isBlacklist(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renounceWhitelistAdmin(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  addWhitelistAdmin(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  checkWhitelist(
    _addr: string | BigNumber,
    _gas: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  refundAll(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  setFundOwner(
    newFundOwnerAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  substituteBlacklistEntry(
    oldAddr: string | BigNumber,
    newAddr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  addBlacklistEntry(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  removeBlacklistEntry(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  getContractVersion(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface GasDelegationWhitelistInstance
  extends Truffle.ContractInstance {
  gasRefilledTimeMap(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isWhitelistAdmin(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  allocatedGasMap(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isSuperWhitelist(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWhitelist(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  renounceWhitelistAdmin(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  addWhitelistAdmin(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  checkWhitelist(
    _addr: string | BigNumber,
    _gas: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  refundAll(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  refundAmount(
    amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  setFundOwner(
    newFundOwnerAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  substituteWhitelistEntry(
    _oldAddr: string | BigNumber,
    _newAddr: string | BigNumber,
    _gasAlloc: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  addWhitelistEntry(
    _addr: string | BigNumber,
    _gasAlloc: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  removeWhitelistEntry(
    _addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  addSuperWhitelistEntry(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  removeSuperWhitelistEntry(
    addr: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  getContractVersion(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface LinearMintableTokenInstance extends Truffle.ContractInstance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateMintAmount(
    blockTimestamp: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  increaseAllowance(
    _spender: string | BigNumber,
    _addedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  decreaseAllowance(
    _spender: string | BigNumber,
    _subtractedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transfer(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approveAndCall(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferOwnership(
    newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  registerLinearMint(
    _mintingSupply: number | BigNumber | string,
    _mintAmountPerPeriod: number | BigNumber | string,
    _intervalPeriodInDays: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  linearMint(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  createdTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  mintedAmount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  mintingStatus(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  intervalPeriodInDays(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  mintAmountPerPeriod(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  mintingSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  intervalCount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  maxSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface MainBridgeInstance extends Truffle.ContractInstance {
  changeAuthoritySignedCount(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  stakes(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  deposits(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BigNumber, BigNumber, BigNumber, boolean]>;

  authorities(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  withdraws(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, boolean]
  >;

  sideTokens(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string, string, BigNumber, BigNumber, BigNumber]>;

  changeAuthoritySignedHistory(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  stakedAmount(
    _staker: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  hashSideTokenId(
    _sideChainId: number | BigNumber | string,
    _name: string,
    _symbol: string,
    _conversionRate: number | BigNumber | string,
    _conversionRateDecimals: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferOwnership(
    newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  pauseBridge(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  resumeBridge(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  changeAuthorityRequest(
    _oldAuthority: string | BigNumber,
    _newAuthority: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  changeAuthority(
    _changeId: string | BigNumber,
    _oldAuthority: string | BigNumber,
    _newAuthority: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  registerSideBridge(
    _sideBridge: string | BigNumber,
    _requiredSignatures: number | BigNumber | string,
    _authorities: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  registerSideToken(
    _sideChainId: number | BigNumber | string,
    _name: string,
    _symbol: string,
    _conversionRate: number | BigNumber | string,
    _conversionRateDecimals: number | BigNumber | string,
    _sideTokenId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  ownerDeposit(
    _beneficiary: string | BigNumber,
    _sideTokenId: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  deposit(
    _sideTokenId: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  withdraw(
    _redeemId: string | BigNumber,
    _sideTokenId: string | BigNumber,
    _beneficiary: string | BigNumber,
    _amountST: number | BigNumber | string,
    txHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  confirmDeposit(
    depositId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  stake(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  unstake(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  receiveApproval(
    _from: string | BigNumber,
    _value: number | BigNumber | string,
    _token: string | BigNumber,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  sideBridge(txDetails?: Truffle.TransactionDetails): Promise<string>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  chainId(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  isPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  mainAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isMainAdmin(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface MainTokenInstance extends Truffle.ContractInstance {
  isLocked(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateMintAmount(
    blockTimestamp: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  linearMint(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  registerLinearMint(
    _mintingSupply: number | BigNumber | string,
    _mintAmountPerPeriod: number | BigNumber | string,
    _intervalPeriodInDays: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferOwnership(
    newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  mint(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  lockAccount(
    _account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  unlockAccount(
    _account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  pause(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  unpause(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transfer(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approve(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  increaseAllowance(
    _spender: string | BigNumber,
    _addedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  decreaseAllowance(
    _spender: string | BigNumber,
    _subtractedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approveAndCall(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  createdTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  mintedAmount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  mintingStatus(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  intervalPeriodInDays(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  mintAmountPerPeriod(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  mintingSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  intervalCount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  maxSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface MainTokenProxyInstance extends Truffle.ContractInstance {
  UpdateContractAddress(
    _newAddress: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferOwnership(
    newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  oldAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
  contractAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  setCompleted(
    completed: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  upgrade(
    new_address: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface OwnableInstance extends Truffle.ContractInstance {
  transferOwnership(
    newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface SideBridgeInstance extends Truffle.ContractInstance {
  authorities(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  changeAuthorityCount(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  changeAuthoritySignedHistory(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  stakedAmount(
    _sideTokenId: string | BigNumber,
    _staker: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  hashSideTokenId(
    _sideChainId: number | BigNumber | string,
    _name: string,
    _symbol: string,
    _conversionRate: number | BigNumber | string,
    _conversionRateDecimals: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  vestCount(
    _vester: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  vestInfo(
    _vester: string | BigNumber,
    index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  transferOwnership(
    newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  pauseBridge(
    _pauseTxHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  resumeBridge(
    _resumeTxHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  registerSideToken(
    _sideTokenId: string | BigNumber,
    _sideToken: string | BigNumber,
    _conversionRate: number | BigNumber | string,
    _conversionRateDecimals: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  acknowledgeSideToken(
    _sideTokenId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  deposit(
    _sideTokenId: string | BigNumber,
    _depositId: string | BigNumber,
    _depositCount: number | BigNumber | string,
    _beneficiary: string | BigNumber,
    _amountMT: number | BigNumber | string,
    _amountST: number | BigNumber | string,
    _transactionHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  stake(
    _sideTokenId: string | BigNumber,
    _staker: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  unstake(
    _sideTokenId: string | BigNumber,
    _recipient: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  vest(
    _sideTokenId: string | BigNumber,
    _vester: string | BigNumber,
    _amount: number | BigNumber | string,
    _cliff: number | BigNumber | string,
    _duration: number | BigNumber | string,
    _interval: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  redeem(
    _sideTokenId: string | BigNumber,
    _owner: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  confirmRedeem(
    redeemId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  changeAuthority(
    _changeId: string | BigNumber,
    _oldAuthority: string | BigNumber,
    _newAuthority: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  mainBridge(txDetails?: Truffle.TransactionDetails): Promise<string>;
  mainChainId(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  operator(txDetails?: Truffle.TransactionDetails): Promise<string>;
  requiredSignatures(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  sideChainId(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface SideTokenInstance extends Truffle.ContractInstance {
  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  increaseAllowance(
    _spender: string | BigNumber,
    _addedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  decreaseAllowance(
    _spender: string | BigNumber,
    _subtractedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transfer(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approveAndCall(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferOwnership(
    newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  setSideTokenId(
    _sideTokenId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  mint(
    _beneficiary: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferWithFee(
    _to: string | BigNumber,
    _amount: number | BigNumber | string,
    _feeCollector: string | BigNumber,
    _fee: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  stake(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  unstake(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  vest(
    _amount: number | BigNumber | string,
    _cliff: number | BigNumber | string,
    _duration: number | BigNumber | string,
    _interval: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  redeem(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  burn(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  maxSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  sideBridgeAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface TestingERC20TokenInstance extends Truffle.ContractInstance {
  allowance(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer(
    _to: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approve(
    _spender: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferWithFee(
    _to: string | BigNumber,
    _amount: number | BigNumber | string,
    _sideDeveloper: string | BigNumber,
    _fee: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approveAction(
    _action: string,
    _to: string | BigNumber,
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  stake(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  unstake(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  vest(
    _amount: number | BigNumber | string,
    _cliff: number | BigNumber | string,
    _duration: number | BigNumber | string,
    _interval: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  burn(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  maxSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface TestingLinearMintableMainTokenInstance
  extends Truffle.ContractInstance {
  isLocked(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf(
    _owner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  calculateMintAmount(
    blockTimestamp: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferFrom(
    _from: string | BigNumber,
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  increaseAllowance(
    _spender: string | BigNumber,
    _addedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  unpause(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  lockAccount(
    _account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  linearMint(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  pause(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  unlockAccount(
    _account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  mint(
    _amount: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  decreaseAllowance(
    _spender: string | BigNumber,
    _subtractedValue: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transfer(
    _to: string | BigNumber,
    _value: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  registerLinearMint(
    _mintingSupply: number | BigNumber | string,
    _mintAmountPerPeriod: number | BigNumber | string,
    _intervalPeriodInDays: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  approveAndCall(
    _spender: string | BigNumber,
    _value: number | BigNumber | string,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  transferOwnership(
    newOwner: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  mintForTest(
    _blockTimestamp: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
  createdTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  mintedAmount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  mintingStatus(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
  intervalPeriodInDays(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  mintAmountPerPeriod(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
  mintingSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  intervalCount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  maxSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface TestTokenRecipientInstance extends Truffle.ContractInstance {
  receiveApproval(
    _from: string | BigNumber,
    _value: number | BigNumber | string,
    _token: string | BigNumber,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  returnHash(
    _sideTokenId: string | BigNumber,
    _depositId: string | BigNumber,
    _depositCount: number | BigNumber | string,
    _beneficiary: string | BigNumber,
    _amountMT: number | BigNumber | string,
    _amountST: number | BigNumber | string,
    _transactionHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  extraData(txDetails?: Truffle.TransactionDetails): Promise<(string)[]>;
}

export interface TokenRecipientInstance extends Truffle.ContractInstance {
  receiveApproval(
    _from: string | BigNumber,
    _value: number | BigNumber | string,
    _token: string | BigNumber,
    _extraData: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;
}

export interface TokenVestingInstance extends Truffle.ContractInstance {
  calculateReleaseAmount(
    blockTimestamp: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  release(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  releaseAmountADay(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  vestedAmount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  releasedAmount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  durationInSeconds(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  intervalInSeconds(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  recipient(txDetails?: Truffle.TransactionDetails): Promise<string>;
  intervalInDays(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  cliffTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
  startTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface WhitelistAdminRoleInstance extends Truffle.ContractInstance {
  isWhitelistAdmin(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addWhitelistAdmin(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;

  renounceWhitelistAdmin(
    txDetails?: Truffle.TransactionDetails
  ): Promise<Truffle.TransactionResponse>;
}
